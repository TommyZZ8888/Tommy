package com.vren.weldingmonitoring_java.wave;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.vren.weldingmonitoring_java.config.SystemConfig;
import com.vren.weldingmonitoring_java.socket.server.DeviceForShow;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.concurrent.CountDownLatch;

@Component
@Slf4j
public class SocketSourceData implements CommandLineRunner {

    private final CountDownLatch count = new CountDownLatch(1);

    private boolean online = false;

    @Autowired
    private Master master;

    private Socket socket;

    private DeviceForShow deviceForShow;

    public DeviceForShow getDeviceForShow() {
        return deviceForShow;
    }

    @Autowired
    private SystemConfig systemConfig;

    public boolean isOnline() {
        return online;
    }

    protected synchronized void init() {
        if (online) {
            return;
        }
        while (true) {
            try {
                this.socket = new Socket(systemConfig.getDataHost(), systemConfig.getDataPort());
                online = true;
                break;
            } catch (IOException e) {
                log.info("Failed to connect to server {}:{}, retrying in 5 seconds...", systemConfig.getDataHost(), systemConfig.getDataPort());
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException interruptedException) {
                    interruptedException.printStackTrace();
                }
            }
        }
    }

    @Override
    public void run(String... args) {
        new Thread(() -> {
            init();
            count.countDown();
        }).start();
        new Thread(() -> {
            try {
                count.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            String result;
            while (true) {
                try {
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    if ((result = bufferedReader.readLine()) == null) continue;
//                    result = "{\"DevId\":\"1\",\"State\":1,\"I\":5.15,\"U\":0.0,\"Gas\":0.0,\"FeedSpeed\":256.0,\"ArcUs\":[14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\"WeldIs\":[5.0,4.0,6.0,4.0,6.0,4.0,7.0,4.0,6.0,4.0,5.0,5.0,4.0,5.0,5.0,5.0,6.0,6.0,5.0,4.0,5.0,5.0,5.0,5.0,5.0,6.0,5.0,6.0,5.0,5.0,4.0,6.0,5.0,6.0,4.0,5.0,5.0,6.0,5.0,5.0,5.0,5.0,5.0,6.0,5.0,6.0,5.0,5.0,6.0,5.0,6.0,5.0,5.0,5.0,5.0,4.0,5.0,4.0,6.0,5.0,7.0,4.0,5.0,5.0,5.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,5.0,6.0,5.0,7.0,5.0,5.0,5.0,6.0,4.0,6.0,4.0,6.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0,5.0,5.0,5.0,6.0,4.0,6.0,5.0,6.0,5.0,5.0,4.0,6.0,5.0,6.0,5.0,6.0,5.0,6.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,5.0,6.0,5.0,6.0,5.0,6.0,5.0,6.0,5.0,6.0,4.0,6.0,5.0,6.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,4.0,6.0,4.0,6.0,4.0,6.0,4.0,5.0,5.0,6.0,4.0,6.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0],\"HList\":[{\"DevId\":\"1\",\"WaveId\":\"69f527e2800d4123a354ace020ead9e8\",\"I\":41.75,\"U\":0.0,\"Gas\":0.0,\"FeedSpeed\":0.0,\"IsStart\":true,\"Date\":\"2023-07-21 10:07:33:000\",\"CreateTime\":\"2023-07-21T10:07:33.0005104+08:00\"}]}";
                    JSONObject jsonObject = JSONObject.parseObject(result);
                    if (jsonObject == null) {
                        continue;
                    }
                    JSONArray arcUs = jsonObject.getJSONArray("ArcUs");
                    JSONArray weldIs = jsonObject.getJSONArray("WeldIs");
                    int size = Math.min(arcUs == null ? 0 : arcUs.size(), weldIs == null ? 0 : weldIs.size());
                    for (int i = 0; i < size; i++) {
                        DeviceForShow deviceForShow = new DeviceForShow();
                        deviceForShow.setI(weldIs.getDouble(i));
                        deviceForShow.setU(arcUs.getDouble(i));
                        deviceForShow.setTime(new Date());
                        this.deviceForShow = deviceForShow;
                        master.push(deviceForShow);
                    }
                } catch (Exception e) {
                    log.info("IOException {}", e.getMessage());
                    online = false;
                    init();
                }
            }
        }).start();
        new Thread(() -> {
            try {
                count.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            while (true) {
                try {
                    OutputStream outputStream = socket.getOutputStream();
                    outputStream.write(("DevId:" + systemConfig.getDevId()).getBytes(StandardCharsets.UTF_8));
                    outputStream.flush();
                    Thread.sleep(100);
                } catch (Exception ignored) {
                    online = false;
                    init();
                }
            }
        }).start();
    }


}

package com.vren.weldingmonitoring_java.wave;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.vren.weldingmonitoring_java.config.SystemConfig;
import com.vren.weldingmonitoring_java.wave.domain.vo.WeldingTaskMessage;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

@Component
@Slf4j
public class WeldingTaskPushService implements CommandLineRunner {

    private Socket socket;

    @Autowired
    private SystemConfig systemConfig;


    private final BlockingQueue<WeldingTaskMessage> queue = new LinkedBlockingQueue<>();


    public void push(WeldingTaskMessage noticeMessage) {
        try {
            this.queue.put(noticeMessage);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    protected void init() {
        while (true) {
            try {
                this.socket = new Socket(systemConfig.getWeldingTaskPushHost(), systemConfig.getWeldingTaskPushPort());
                break;
            } catch (IOException e) {
                log.info("Failed to connect to server {}:{}, retrying in 5 seconds...", systemConfig.getWeldingTaskPushHost(), systemConfig.getWeldingTaskPushPort());
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException interruptedException) {
                    interruptedException.printStackTrace();
                }
            }
        }
    }


    @Override
    public void run(String... args) {
        new Thread(() -> {
            init();
            while (true) {
                try {
                    WeldingTaskMessage take = this.queue.poll(1, TimeUnit.SECONDS);
                    if (take == null) {
                        continue;
                    }
                    SerializeConfig serializeConfig = new SerializeConfig();
                    serializeConfig.propertyNamingStrategy = PropertyNamingStrategy.SnakeCase;
                    String s = JSONObject.toJSONString(take, serializeConfig, SerializerFeature.WriteMapNullValue) + "\r\n";
                    OutputStream outputStream = socket.getOutputStream();
                    outputStream.write(s.getBytes(StandardCharsets.UTF_8));
                    outputStream.flush();
                } catch (SocketException e) {
                    init();
                } catch (Exception ignored) {
                }
            }
        }).start();
    }
}

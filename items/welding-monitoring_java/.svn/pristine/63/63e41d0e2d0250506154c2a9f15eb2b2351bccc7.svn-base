package com.vren.weldingmonitoring_java;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.vren.weldingmonitoring_java.socket.server.ImageBody;
import org.bytedeco.javacv.FFmpegFrameGrabber;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.Java2DFrameConverter;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

public class Tests {
    public static void main(String[] args) throws Exception {
        new Thread(() -> {
            try {
                ServerSocket serverSocket = new ServerSocket(8088);
                while (true) {
                    try {
                        Socket accept = serverSocket.accept();
                        InputStreamReader inputStreamReader = new InputStreamReader(accept.getInputStream());
                        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                        String content;
                        while ((content = bufferedReader.readLine()) != null) {
                            OutputStream outputStream = accept.getOutputStream();
                            JSONObject jsonObject = new JSONObject();
                            List<Double> weldIs = new ArrayList<>();
                            List<Double> arcUs = new ArrayList<>();
                            for (int i = 0; i < 170; i++) {
                                weldIs.add(10 + (Math.random() * (3 + 3 + 1) - 3));
                                arcUs.add(10 + (Math.random() * (3 + 3 + 1) - 3));
                            }
                            jsonObject.put("WeldIs", weldIs);
                            jsonObject.put("ArcUs", arcUs);
                            outputStream.write((jsonObject.toJSONString() + "\n").getBytes(StandardCharsets.UTF_8));
                            outputStream.flush();
                        }
                    } catch (Exception ignored) {

                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
        new Thread(() -> {
            try {
                Socket socket = new Socket("127.0.0.1", 7777);
                Base64.Encoder encoder = Base64.getEncoder();
                FFmpegFrameGrabber fFmpegFrameGrabber = new FFmpegFrameGrabber("C:\\Users\\Lenovo\\Desktop\\test.mp4");
                while (true) {
                    try {
                        fFmpegFrameGrabber.restart();
                        int length = fFmpegFrameGrabber.getLengthInFrames();
                        Frame frame = null;
                        for (int i = 0; i < length; i++) {
                            frame = fFmpegFrameGrabber.grabFrame();
                            if (frame.image == null) {
                                continue;
                            }
                            Java2DFrameConverter converter = new Java2DFrameConverter();
                            BufferedImage image = converter.getBufferedImage(frame);
                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                            ImageIO.write(image, "png", stream);
                            byte[] encode = encoder.encode(stream.toByteArray());
                            StringBuilder sb = new StringBuilder();
                            ImageBody imageBody = new ImageBody();
                            imageBody.setPicture(new String(encode));
                            imageBody.setCameraSN("sn23154058");
                            sb.append(JSON.toJSONString(imageBody));
                            sb.append("\r\n");
                            OutputStream outputStream = socket.getOutputStream();
                            outputStream.write(sb.toString().getBytes(StandardCharsets.UTF_8));
                            outputStream.flush();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
        while (true) {

        }
    }
}
